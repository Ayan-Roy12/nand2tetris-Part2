// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
   // Put you code here:

   //form x input to ALU
   Not(in=zx, out=zxNot);
   And16(a[0]=zxNot, a[1]=zxNot, a[2]=zxNot,a[3]=zxNot,a[4]=zxNot,a[5]=zxNot,a[6]=zxNot,a[7]=zxNot,a[8]=zxNot,a[9]=zxNot,a[10]=zxNot,a[11]=zxNot, a[12]=zxNot,a[13]=zxNot,a[14]=zxNot,a[15]=zxNot, b=x, out=zxNotAndx);   
   
   Not16(in=zxNotAndx, out=zxOrNotx);
   //Mux16(a=zxNotAndx, b=zxOrNotx, sel=nx, out=xInALU);

   //The following would be simpler than the Mux16 above , if an Xor16 part was available 
   Xor16(a[0]=nx, a[1]=nx, a[2]=nx,a[3]=nx,a[4]=nx,a[5]=nx,a[6]=nx,a[7]=nx,a[8]=nx,a[9]=nx,a[10]=nx,a[11]=nx, a[12]=nx,a[13]=nx,a[14]=nx,a[15]=nx, b=zxNotAndx, out=xInALU);
  
   //form y input to ALU
   Not(in=zy, out=zyNot);
   And16(a[0]=zyNot, a[1]=zyNot, a[2]=zyNot,a[3]=zyNot,a[4]=zyNot,a[5]=zyNot,a[6]=zyNot,a[7]=zyNot,a[8]=zyNot,a[9]=zyNot,a[10]=zyNot,a[11]=zyNot, a[12]=zyNot,a[13]=zyNot,a[14]=zyNot,a[15]=zyNot, b=y, out=zyNotAndx);   
   
   Not16(in=zyNotAndx, out=zyOrNotx);
   //Mux16(a=zyNotAndx, b=zyOrNotx, sel=ny, out=yInALU);
   Xor16(a[0]=ny, a[1]=ny, a[2]=ny,a[3]=ny,a[4]=ny,a[5]=ny,a[6]=ny,a[7]=ny,a[8]=ny,a[9]=ny,a[10]=ny,a[11]=ny, a[12]=ny,a[13]=ny,a[14]=ny,a[15]=ny, b=zyNotAndx, out=yInALU);

   //ALU
   Add16(a=xInALU, b=yInALU, out=AddOut);
   And16(a=xInALU, b=yInALU, out=AndOut);
   Mux16(a=AndOut,b=AddOut,sel=f,out=ALUout);

   //negate ALU out?
   Not16(in=ALUout, out=NotALUout);
   //Mux16(a=ALUout, b=NotALUout, sel=no, out[0..7]=outlsb, out[8..15]=outmsb, out[15]=ng, out=out);

   //using an Xor16 would be simpler than the Mux16 above
   Xor16(a=ALUout,b[0]=no, b[1]=no, b[2]=no,b[3]=no,b[4]=no,b[5]=no,b[6]=no,b[7]=no,b[8]=no,b[9]=no,b[10]=no,b[11]=no, b[12]=no,b[13]=no,b[14]=no,b[15]=no, out[0..7]=outlsb, out[8..15]=outmsb, out[15]=ng, out=out);

   //form zr
   Or8Way(in=outlsb, out=zrInA);
   Or8Way(in=outmsb, out=zrInB);
   Or(a=zrInA, b=zrInB, out=zrNot);
   Not(in=zrNot, out=zr);

}